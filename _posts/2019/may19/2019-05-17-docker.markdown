---
layout: post
title:  "Docker - an overview!"
date:   2019-05-17 16:58:08
categories: infra
permalink: /:categories/docker
---



<p style="text-align: justify;">Today I will talk about <a href="https://www.docker.com/">Docker</a>. It is a nice whale that has been appearing in the development environment.</p>

<p style="text-align: justify;">Yeah. Reading something about that I was very enthusiastic with that. Who usually studies new IT topics to perform some tests knows how annoying sometimes have to go installing and configuring various tools, polluting your computer with various technologies to perform some tests and then have to discard. With docker this can be solved. With docker you can centralize these settings and, when you finish your tests, you can throw away or even save a portion of the environment that you can use at other times.</p>

<p style="text-align: justify;">Of course, Docker is muuuuuch more than that. Docker helps you through the entire development process, from the development itself to the production environment.</p>

<p style="text-align: justify;">Good, but my goal here is to just give you a general idea about what docker is and what it can bring of benefits. And from there each one will be able to deepen according to two needs.</p>

<p style="text-align: justify;">Let’s go!!!.</p>

<h3>What is it – An Overview</h3>

<p style="text-align: justify;"><a href="https://docs.docker.com/engine/docker-overview/">Docker</a> is an open source project that aims to leave applications in containers. Docker can be used to develop, deploy, and run applications. It allows you to separate the application from the infrastructure.</p>

<p style="text-align: justify;">Anyone who works developing application knows how annoying it is often to worry about the environment itself instead of focusing on the main focus that is developing features.</p>

<p style="text-align: justify;">The docker is based on client-server architecture where the client initiates a request to the server (deamon), the server can be remote or not. This communication is performed via <a href="https://pt.wikipedia.org/wiki/REST">REST API</a>, CLI (terminal) and the Kitematic (GUI).

<p style="text-align: justify;">Some confusion is common when start tje studies on Docker. One of that is the fact that Docker is not virtual machine (VM).</p>

<p style="text-align: justify;">A good comparison was made in the <em>eBook: Docker-for-Virtualization-Admin</em> that compares VM to a house and the Docker is compared to an apartment. In a house, the whole structure is individual and independent, while in an apartment a part of the structure is shared. You can create Docker image only with what will be used in your application. While the VMs start with the complete operating system and depending on the application, the developer may or may not perform some customization. But that does not mean that VM and Docker container cannot coexist. It is possible to have a Docker container inside a VM.</p>

<p style="text-align: justify;">In a simplistic way, we can consider that docker is something to manage an easy, small portion of the infrastructure needed to run an application. It is possible to have more than one such structure in communication, but this detail I leave for who will need to go deep according to their needs.</p>

<h3>Terminology</h3>

<ul>
  <li>Daemon: a portion of the server where there is container management</li>
  <li>CLI: commands and communicates with the docker daemon</li>
  <li>Image: a repository for the images, is the basis for the containers.</li>
  <li>Containers: application directories created from the docker image and where the application runs</li>
  <li>Images: instant images of containers. They can be official and maintained by a specialized team, and users, which are created by users like you and me.</li>
  <li>Dockerfiles: scripts that automate the process of constructing images; they define what will exist inside the containers. It is a simple text file with a list of commands that will indicate to the client docker what should be created in the image.</li>
  <li>Docker Hub: Register of images</li>
  <li>Docker Machine: Creates a host on your computer, in the cloud, or in your data center</li>
  <li>Docker compose: a tool for defining and executing multi-container applications</li>
  <li>Docker Swarm: native clustering solution for docker;</li>
</ul>

<p style="text-align: justify;">Each built container can be stored and made available in a repository, which works similarly to GitHub.</p>

<h3>Best Practices</h3>

<ul>
 <li>Have small images</li>
 <li>Use swarm whenever possible</li>
 <li>Use continuous integration for application testing and deployment</li>
 <li>Create ephemeral containers, that is, containers that can be simply replaced.</li>
 <li>Do not install unnecessary things</li>
 <li>Each container must have a goal</li>
</ul>

<br/>
<h3>Summary</h3>

<center>
<iframe width="560" height="315" src="https://www.youtube.com/embed/8P9NTaE-dLg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</center>

<h3>Course</h3>
<p> A good course to introduce this subject to you is:
<a href="https://www.cod3r.com.br/courses/docker">Docker: Ferramenta essencial para Desenvolvedores</a> and <a href="https://www.udemy.com/course/learn-docker/?couponCode=ST13MT40224">Docker for the Absolute Beginner - Hands On - DevOps
</a>
</p>
